name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master
      - ci/*

jobs:
  build-toplevel:
    strategy:
      fail-fast: false
      matrix:
        include:
          - host: vps
            os: ubuntu-latest
          - host: wsl
            os: ubuntu-latest
          - host: rpi
            os: ubuntu-24.04-arm

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout tree
        uses: actions/checkout@v5

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v34

      - name: Restore and cache Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          # restore and save a cache using this key
          primary-key: nix-${{ matrix.os }}-${{ matrix.host }}-${{ hashFiles('**/*.nix') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ matrix.os }}-${{ matrix.host }}
          # collect garbage until Nix store size (in bytes) is at most this number
          # before trying to save a new cache
          gc-max-store-size-linux: 1073741824
          # do purge caches
          purge: true
          # purge all versions of the cache
          purge-prefixes: cache-${{ matrix.os }}-${{ matrix.host }}
          # created more than this number of seconds ago relative to the start of the `Post Restore` phase
          purge-created: 0
          # except the version with the `primary-key`, if it exists
          purge-primary-key: never

      - name: Build TopLevel / ${{ matrix.host }}
        run: nix build .#nixosConfigurations.${{ matrix.host }}.config.system.build.toplevel

  build-rpi4-image:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-24.04-arm
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout tree
        uses: actions/checkout@v5

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v34

      - name: Restore and cache Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          # restore and save a cache using this key
          primary-key: nix-${{ matrix.os }}-${{ matrix.host }}-${{ hashFiles('**/*.nix') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ matrix.os }}-${{ matrix.host }}
          # collect garbage until Nix store size (in bytes) is at most this number
          # before trying to save a new cache
          gc-max-store-size-linux: 1073741824
          # do purge caches
          purge: true
          # purge all versions of the cache
          purge-prefixes: cache-${{ matrix.os }}-${{ matrix.host }}
          # created more than this number of seconds ago relative to the start of the `Post Restore` phase
          purge-created: 0
          # except the version with the `primary-key`, if it exists
          purge-primary-key: never

      - name: Run Test
        run: nix build .#rpi4-image
        
  cache-build:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-24.04-arm
        host:
          - rpi
    runs-on:  ${{ matrix.os }}

    steps:
      - name: Checkout tree
        uses: actions/checkout@v5

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v34

      - name: Setup Attic
        run: |
          nix profile install 'nixpkgs#attic-client'
          attic login central ${{ secrets.ATTIC_ENDPOINT }} ${{ secrets.ATTIC_TOKEN }}
          attic use central:${{ secrets.ATTIC_CACHE }}

      - name: Build TopLevel / ${{ matrix.host }}
        run: nix build .#nixosConfigurations.${{ matrix.host }}.config.system.build.toplevel --fallback

      - name: Push to Attic
        if: github.event_name != 'pull_request'
        run: attic push --jobs 2 central:${{ secrets.ATTIC_CACHE }} ./result
