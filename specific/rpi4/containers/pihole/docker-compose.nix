# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."pihole" = {
    image = "pihole/pihole:latest";
    environment = {
      "FTLCONF_dns_listeningMode" = "all";
      "FTLCONF_webserver_api_password" = "";
      "TZ" = "Asia/Shanghai";
    };
    volumes = [
      "pihole_etc-pihole:/etc/pihole:rw"
    ];
    ports = [
      "53:53/tcp"
      "53:53/udp"
      "80:80/tcp"
      "443:443/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--cap-add=NET_ADMIN"
      "--cap-add=SYS_NICE"
      "--cap-add=SYS_TIME"
      "--network=host"
    ];
  };
  systemd.services."docker-pihole" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-volume-pihole_etc-pihole.service"
    ];
    requires = [
      "docker-volume-pihole_etc-pihole.service"
    ];
    partOf = [
      "docker-compose-pihole-root.target"
    ];
    wantedBy = [
      "docker-compose-pihole-root.target"
    ];
  };

  # Volumes
  systemd.services."docker-volume-pihole_etc-pihole" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      docker volume inspect pihole_etc-pihole || docker volume create pihole_etc-pihole
    '';
    partOf = [ "docker-compose-pihole-root.target" ];
    wantedBy = [ "docker-compose-pihole-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-pihole-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
